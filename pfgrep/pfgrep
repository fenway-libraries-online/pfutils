#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub readloop;
sub usage;
sub fatal;

my ($read_stdin, $tmp_file, $syslog_name, $rejected, $quiet, $verbose, $client, $domain, $sender, $recipient);
my ($analyze, $parseable, $show_errors);
my $noqueue = 0;
my @logfiles;

GetOptions(
    'a|analyze' => sub { $analyze = $verbose = 1 },
    'p|parseable' => sub { $parseable = 1; $verbose = 0 },
    'e|show-errors' => sub { $show_errors = 1; $verbose = 0 },
    'q|quiet' => \$quiet,
    'v|verbose' => \$verbose,
    'n|syslog-name=s' => \$syslog_name,
    'l|log-file=s' => \@logfiles,
    'L|all-log-files' => sub {
        push @logfiles, sort { -M $b <=> -M $a } map { grep { -s $_ } glob($_) } qw(/var/log/mail.log* /var/log/maillog*);
    },
    'i|read-stdin' => \$read_stdin,
    'f|find-sender' => \$sender,
    't|find-recipient' => \$recipient,
    'r|rejected' => \$rejected,
) or usage;

if ($read_stdin) {
    usage if @logfiles;
    my $host = `hostname -s` || 'localhost'; chomp $host;
    $tmp_file = "/tmp/pfgrep.$host.$$";
    open my $fhtmp, '>', $tmp_file or fatal "open $tmp_file for writing: $!";
    while (<STDIN>) {
        print $fhtmp $_;
    }
    @logfiles = ($tmp_file);
}
else {
    @logfiles = default_log_files() if !@logfiles;
    fatal 'No mail log files found' if !@logfiles;
}

usage if !@ARGV;
my @regexpen;
my $reread;
foreach (@ARGV) {
    if (m{^/(.+)/$}) {
        push @regexpen, qr/$1/;
        $reread = 1;
    }
    elsif (/^([0-9A-Fa-f]{6,})$/) {
        push @regexpen, qr/: $1: /;
    }
    elsif (/^([-a-z]+=)?<?([^@<>]*)\@([^<>\s]+)>?$/) {
        # Sender, recipient, message ID, etc.
        my ($k, $u, $d) = ($1, $2, $3);
        if (!defined $k) {
            if ($sender) {
                $k = 'from=';
            }
            elsif ($recipient) {
                $k = 'to=';
            }
            else {
                $k = '=';
            }
        }
        $u = '[^@<>]+' if !length $u;
        push @regexpen, qr/$k<$u[@]$d>/;
        $reread = 1;
    }
    elsif (/^\[(.+)\]$/) {
        push @regexpen, qr/\[$1\]/;
        $reread = 1;
    }
    else {
        push @regexpen, qr/$_/;
        $reread = 1;
    }
}

my (%qid, @qids);
readloop @logfiles, sub {
    if (defined $syslog_name) {
        return if !m{ $syslog_name/[-a-z]+\[};
    }
    if ($rejected) {
        return if !/: NOQUEUE: reject: /;
        my $qid = '<rejected-' . ++$noqueue . '>';
        foreach my $rx (@regexpen) {
            if ($_ =~ $rx) {
                my $q = $qid{$qid} ||= [$_];
                push @qids, $qid;
                return;
            }
        }
    }
    return if !/^.+: ([0-9A-F]{6,}): /;
    my $qid = $1;
    foreach my $rx (@regexpen) {
        if ($_ =~ $rx) {
            my $q = $qid{$qid} ||= [];
            push @qids, $qid if !@$q;
            push @$q, $_ if !$reread;
            return;
        }
    }
};
my $fhout;
if ($analyze) {
    my @cmd = qw(pfanalyze);
    if ($parseable) {
        push @cmd, qw(-p);
        push @cmd, qw(-e) if $show_errors;
    }
    open $fhout, '|-', @cmd or fatal "exec pfanalyze: $!";
}
else {
    $fhout = \*STDOUT;
}
if ($reread) {
    readloop @logfiles, sub {
        return if !/^.+: ([0-9A-F]{6,}): /;
        my $qid = $1;
        my $q = $qid{$qid} or return;
        push @$q, $_;
    };
}
print_header() if $analyze && $verbose;
foreach my $qid (@qids) {
    print "\e[32;1mQueue ID $qid:\e[0m\n" if !$analyze;
    print $fhout @{ $qid{$qid} };
}
if ($analyze) {
    close $fhout or fatal "close pfanalyze: $!";
}
print <<'EOS' if $verbose;
KEY: 
  D = Postfix is done with the message
  Q = the message is still in a queue
DSN codes:
  2.x.x = success
  4.x.x = failure, may be transient
  5.x.x = failure, Postfix has given up
For code explanations see http://tools.ietf.org/html/rfc3463
EOS

if (defined $tmp_file) {
    unlink $tmp_file;
}

# --- Functions

sub readloop {
    my $sub = pop @_;
    foreach my $f (@_) {
        my $fh;
        if (ref $f) {
            $fh = $f;
        }
        elsif ($f =~ /\.gz$/) {
            open $fh, '-|', qw(gunzip -c), $f or die "exec gunzip -c $f: $!";
        }
        else {
            open $fh, '<', $f or die "open $f: $!";
        }
        local $_;
        while (<$fh>) {
            $sub->($f);
        }
    }
}

sub default_log_files {
    my @files = sort { -M $a <=> -M $b } map { grep { -s $_ } glob($_) } qw(/var/log/mail.log* /var/log/maillog*);
    return if !@files;
    return shift @files;
}

sub print_header {
    printf "* %-5.5s %-11.11s %-7.7s %-19.19s %s\n", 'DSN', 'Queue ID', 'Elapsed', 'End date and time', 'User and host';
    printf "- %-5.5s %-11.11s %-7.7s %-19.19s %s\n", qw(----- ----------- ---------- -------------------- -------------------------------);
}

sub usage {
    print STDERR <<'EOS';
usage: pfgrep [-aqvLiftV] [-l FILE] OBJECT...
OBJECT is one of the following...
  E-mail address:
        postmaster@example.domain
  Postfix queue ID:
        E794832C38AF
  Client IP address in square brackets:
        [1.2.3.4]
  Domain name:
        foo.example.org
  Any other pattern:
        baz
EOS
    exit 1;
}

sub fatal {
    print STDERR "pfgrep: @_\n";
    exit 2;
}
