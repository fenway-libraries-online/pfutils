#!/usr/bin/perl

use strict;
use warnings;

use POSIX qw(strftime);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

# State -- queued or done
use constant QUEUED   => 'Q';
use constant REJECTED => 'R';
use constant DONE     => 'D';

$| = 1;

my $year = (localtime)[5] + 1900;
my $only_domain;
my ($show_jobs, $show_only_jobs, $parseable, $show_errors, %want);

GetOptions(
    'd|domain=s' => \$only_domain,
    'y|year=i' => \$year,
    'j|show-jobs' => \$show_jobs,
    'J|show-only-jobs' => sub { $show_jobs = $show_only_jobs = 1 },
    'p|parseable' => \$parseable,
    'e|show-errors' => \$show_errors,
    'b|bounces' => sub { $want{'bounced'} = 1 },
    'V|version' => sub {
        print <<'EOS';
pfgrep __VERSION__ by __AUTHOR__
__COPYRIGHT__
EOS
        exit 0
    },
) or usage();

my %mon2num = qw(
    Jan  1      Feb  2      Mar  3
    Apr  4      May  5      Jun  6
    Jul  7      Aug  8      Sep  9
    Oct 10      Nov 11      Dec 12
);

my %job;
my ($from, $to);
my $last_timestamp = 0;

$SIG{'HUP'} = \&show_jobs;

open STDIN, '<', '/dev/null'
    if $show_only_jobs && !@ARGV;

while (defined(my $line = <>)) {
    next if $line =~ /^\e\[/;  # Decorations for terminal
    next if $line !~ /\S/;     # Blank line
    chomp $line;
    my ($mon, $day, $time, undef, undef, $qid, $etc) = split /\s+/, $line, 7;
    next if !exists $mon2num{$mon};
    $qid =~ s/:$//;
    my $timestamp = timestamp($year, $mon, $day, (split /:/, $time));
    $etc = '' if !defined $etc;
    if ($etc eq 'removed') {
        my @keys = grep { /^$qid:/ } keys %job;
        my @jobs = delete @job{@keys};
        next if !@jobs;
        if (!$show_only_jobs) {
            output(DONE, $_, $timestamp) for @jobs;
        }
        $last_timestamp = $timestamp;
    }
    elsif ($line =~ / from=(<[^\s<>]*>)/) {
        $from = $1;
        if ($qid eq 'NOQUEUE') {
            my ($status, $dsn, $msg);
            # ($etc =~ /: ([^:;]+): ([^:;]+);/g)
            if ($etc =~ /^reject: RCPT from \S+: (\d\d\d) (\d\.\d\.\d) ([^;]*);\s+.+ to=(<[^\s<>]*>)/) {
                ($status, $dsn, $msg, $to) = ($1, $2, $3, $4);
                output(REJECTED, [ '--NOQUEUE--', $from, $to, $timestamp, $status, $dsn, $msg ], $timestamp);
            }
            else {
                die "unrecognized NOQUEUE entry: $line\n";
            }
            undef $from;
            undef $to;
        }
    }
    elsif ($line !~ / to=<\S/) {
        next;
    }
    else {
        $line =~ s/status=(\S+)(?:\s+(.+))?// or next;
        my ($status, $msg) = ($1, $2);
        my %line = ('message' => $msg);
        while ($etc =~ s/(.+?)=(\S+?), //) {
            $line{$1} = $2;
        }
        #s/^<|>$//g for grep { defined $_ } @line{qw(to orig_to)};
        $to = $line{'to'};
        foreach ($from, $to) {
            $_ = '?'  if !defined $_;
            $_ = '<>' if !length $_;
        }
        my ($user, $domain) = split /\@/, $to;
        $domain = '.' if !defined $domain || !length $domain;
        $domain = lc $domain;
        if (!defined $only_domain || $domain eq $only_domain) {
            my $key = $qid . ':' . $user . '@' . $domain;
            if (defined $job{$key}) {
                $job{$key}->[4] = $status;
                $job{$key}->[5] = $line{'dsn'} || '0.0.0';
                $job{$key}->[6] = $msg;
            }
            else {
                $job{$key} = [ $qid, $from, $to, $timestamp, $status, $line{'dsn'} || '0.0.0', $msg ];
            }
        }
        $last_timestamp = $timestamp;
    }
}
show_jobs() if $show_jobs;

# --- Functions

sub show_jobs {
    print "{\n";
    output(QUEUED, $_, $last_timestamp) for values %job;
    print "}\n";
}

sub timestamp {
    return strftime('%s', localtime) if !@_;
    my ($Y, $m, $d, $H, $M, $S) = @_;
    my $t = strftime('%s', $S, $M, $H, $d, $mon2num{$m}-1, $Y-1900);
    my $td = $t - time();
    if ($td > 86400 * 31) {
        $t = timestamp($year - 1, $m, $d, $H, $M, $S);
    }
    return $t;
}

sub parsemsg {
    local $_ = shift;
    if (s/^\(host \S+ said: //) {
        s/\)$//;
    }
    return $_;
}

sub output {
    my ($state, $job, $timestamp) = @_;
    my ($qid, $from, $to, $started, $status, $dsn, $msg) = @$job;
    return if %want and !$want{$status};
    my $delay = defined($started) ? int(($timestamp - $started) / 60) : 0;
    if ($parseable) {
        # "* %-5.5s %-11.11s %-7.7s %-19.19s %s\n", 'DSN', 'Queue ID', 'Elapsed', 'End date and time', 'User and host';
        if ($show_errors && $dsn =~ /^[45]/) {
            printf "%s %-5.5s %-11s %6dm %s %s %s :: %s\n",
                   $state, $dsn, $qid, $delay, ymdhms($timestamp), $from, $to, parsemsg($msg || '(unknown error)');
        }
        else {
            printf "%s %-5.5s %-11s %6dm %s %s %s\n",
                   $state, $dsn, $qid, $delay, ymdhms($timestamp), $from, $to;
        }
    }
    else {
        if ($show_errors && $dsn =~ /^[45]/) {
            printf "%s %-5.5s %-11s %6dm %s %s %s :: %s\n",
                   $state, $dsn, $qid, $delay, ymdhms($timestamp), $from, $to, parsemsg($msg || '(unknown error)');
        }
        else {
            printf "%s %-5.5s %-11s %6dm %-19.19s %s\n".
                   "%53.53s %s\n",
                   $state, $dsn, $qid, $delay, ymdhms($timestamp), $from, chr(96)."->", $to;
        }
    }
}

sub ymdhms {
    my ($s) = @_;
    return '????-??-?? ??:??:??' if !defined $s;
    strftime('%Y-%m-%d %H:%M:%S', localtime $s);
}
